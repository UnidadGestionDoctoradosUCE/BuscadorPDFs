import os
import fitz  # PyMuPDF
import tkinter as tk
from tkinter import ttk, messagebox

ruta_drive = r'G:\Mi unidad\Doctorados\DB_General'
documentos_drive = []

def cargar_documentos(ruta):
    documentos = []
    for carpeta, _, archivos in os.walk(ruta):
        for archivo in archivos:
            if archivo.lower().endswith('.pdf'):
                ruta_completa = os.path.join(carpeta, archivo)
                nombre_archivo = archivo.replace('.pdf', '').replace('_', ' ')

                partes_ruta = os.path.relpath(ruta_completa, ruta).split(os.sep)
                universidad = partes_ruta[0] if len(partes_ruta) > 0 else ''
                programa = partes_ruta[1] if len(partes_ruta) > 1 else ''
                estudiante = partes_ruta[2] if len(partes_ruta) > 2 else ''

                documentos.append({
                    'universidad': universidad,
                    'programa': programa,
                    'estudiante': estudiante,
                    'nombre': nombre_archivo.lower(),
                    'ruta': ruta_completa
                })
    return documentos

def actualizar_comboboxes():
    universidades = sorted(set(doc['universidad'] for doc in documentos_drive))
    programas = sorted(set(doc['programa'] for doc in documentos_drive))
    estudiantes = sorted(set(doc['estudiante'] for doc in documentos_drive))

    combo_universidad['values'] = ['(Todos)'] + universidades
    combo_programa['values'] = ['(Todos)'] + programas
    combo_estudiante['values'] = ['(Todos)'] + estudiantes

    combo_universidad.set('(Todos)')
    combo_programa.set('(Todos)')
    combo_estudiante.set('(Todos)')

def buscar():
    resultados.delete(*resultados.get_children())

    filtro_u = combo_universidad.get()
    filtro_p = combo_programa.get()
    filtro_e = combo_estudiante.get()
    filtro_nombre = entrada_nombre.get().strip().lower()

    encontrados = []
    for d in documentos_drive:
        if (filtro_u == '(Todos)' or d['universidad'] == filtro_u) and \
           (filtro_p == '(Todos)' or d['programa'] == filtro_p) and \
           (filtro_e == '(Todos)' or d['estudiante'] == filtro_e) and \
           (filtro_nombre in d['nombre']):
            encontrados.append(d)

    if not encontrados:
        messagebox.showinfo("No encontrado", "No se encontró ningún documento con los filtros aplicados.")
        return

    for doc in encontrados:
        resultados.insert("", "end", values=(
            doc['universidad'].title(),
            doc['programa'].title(),
            doc['estudiante'].title(),
            doc['nombre'].title(),
            doc['ruta']
        ))

def abrir_pdf():
    item = resultados.focus()
    if item:
        ruta = resultados.item(item)['values'][4]
        os.startfile(ruta)
    else:
        messagebox.showwarning("Selecciona algo", "Debes seleccionar un resultado.")

# --- Interfaz ---
ventana = tk.Tk()
ventana.title("Buscador de Doctorados")
ventana.geometry("1000x550")

# Filtros
frame_filtros = tk.Frame(ventana)
frame_filtros.pack(pady=10)

tk.Label(frame_filtros, text="Universidad:").grid(row=0, column=0, padx=5)
combo_universidad = ttk.Combobox(frame_filtros, width=25, state="readonly")
combo_universidad.grid(row=0, column=1)

tk.Label(frame_filtros, text="Programa:").grid(row=0, column=2, padx=5)
combo_programa = ttk.Combobox(frame_filtros, width=25, state="readonly")
combo_programa.grid(row=0, column=3)

tk.Label(frame_filtros, text="Estudiante:").grid(row=0, column=4, padx=5)
combo_estudiante = ttk.Combobox(frame_filtros, width=25, state="readonly")
combo_estudiante.grid(row=0, column=5)

# Entrada nombre (opcional)
tk.Label(ventana, text="Filtrar por nombre del archivo (opcional):", font=("Arial", 12)).pack()
entrada_nombre = tk.Entry(ventana, width=70, font=("Arial", 12))
entrada_nombre.pack(pady=5)

tk.Button(ventana, text="Buscar", command=buscar, font=("Arial", 12)).pack(pady=5)

# Resultados
columnas = ("Universidad", "Programa", "Estudiante", "Nombre", "Ruta")
resultados = ttk.Treeview(ventana, columns=columnas, show="headings")
for col in columnas:
    resultados.heading(col, text=col)
    resultados.column(col, width=180 if col != "Ruta" else 300)
resultados.pack(expand=True, fill="both", padx=10, pady=10)

tk.Button(ventana, text="Abrir PDF seleccionado", command=abrir_pdf, font=("Arial", 12)).pack(pady=10)

# Cargar documentos y actualizar filtros
documentos_drive = cargar_documentos(ruta_drive)
actualizar_comboboxes()

ventana.mainloop()
